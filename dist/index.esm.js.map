{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["export default function createAsyncCacher() {\n  const wm: WeakMap<Function, Map<number, any>> = new WeakMap();\n\n  return async <K = any>(fn: Function, ...args: any[]): Promise<K> => {\n    const hash = hashCode(args);\n\n    if (wm.has(fn)) {\n      const argMap = wm.get(fn);\n      if (argMap.has(hash)) return argMap.get(hash);\n      return argMap.set(hash, await fn(...args)).get(hash);\n    } else\n      return wm\n        .set(fn, new Map().set(hash, await fn(...args)))\n        .get(fn)\n        .get(hash);\n  };\n}\n\n// Same as Java's hashCode()\nfunction hashCode(...args: any[]) {\n  const json = JSON.stringify(args);\n\n  for (var i = 0, hashed = 0; i < json.length; i++)\n    hashed = (Math.imul(31, hashed) + json.charCodeAt(i)) | 0;\n\n  return hashed;\n}\n"],"names":["createAsyncCacher","wm","WeakMap","fn","args","hash","hashCode","has","argMap","get","set","Map","_Map2","json","JSON","stringify","i","hashed","length","Math","imul","charCodeAt"],"mappings":"SAAwBA,IACtB,IAAMC,EAA0C,IAAIC,QAEpD,gBAAuBC,WAAiBC,EAChCC,EAAOC,EADyBF,8BAGtC,GAAIH,EAAGM,IAAIJ,GAAK,CACd,IAAMK,EAASP,EAAGQ,IAAIN,GACtB,GAAIK,EAAOD,IAAIF,GAAO,uBAAOG,EAAOC,IAAIJ,IAF1B,MAGPG,EAAOE,2BAAgBP,eAAMC,qBAApC,cAAOI,EAAWH,KAAyBI,IAAIJ,WAExCJ,EACJS,MAAQ,IAAIC,MAAJC,EAAUF,2BAAgBP,eAAMC,qBAD3C,cAAOH,EACAE,WAAkBE,MACtBI,IAAIN,GACJM,IAAIJ,KAXX,oCAgBF,SAASC,IAGP,IAFA,IAAMO,EAAOC,KAAKC,oCAETC,EAAI,EAAGC,EAAS,EAAGD,EAAIH,EAAKK,OAAQF,IAC3CC,EAAUE,KAAKC,KAAK,GAAIH,GAAUJ,EAAKQ,WAAWL,GAAM,EAE1D,OAAOC"}