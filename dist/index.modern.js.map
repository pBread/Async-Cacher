{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["export default function createAsyncCacher() {\n  const wm: WeakMap<Function, Map<number, any>> = new WeakMap();\n\n  return async <K = any>(fn: Function, ...args: any[]): Promise<K> => {\n    const hash = hashCode(args);\n\n    if (wm.has(fn)) {\n      const argMap = wm.get(fn);\n      if (argMap.has(hash)) return argMap.get(hash);\n      return argMap.set(hash, await fn(...args)).get(hash);\n    } else\n      return wm\n        .set(fn, new Map().set(hash, await fn(...args)))\n        .get(fn)\n        .get(hash);\n  };\n}\n\n// Same as Java's hashCode()\nfunction hashCode(...args: any[]) {\n  const json = JSON.stringify(args);\n\n  for (var i = 0, hashed = 0; i < json.length; i++)\n    hashed = (Math.imul(31, hashed) + json.charCodeAt(i)) | 0;\n\n  return hashed;\n}\n"],"names":["createAsyncCacher","wm","WeakMap","fn","args","hash","json","JSON","stringify","i","hashed","length","Math","imul","charCodeAt","hashCode","has","argMap","get","set","Map"],"mappings":"SAAwBA,IACtB,MAAMC,EAA0C,IAAIC,QAEpD,aAAuBC,KAAiBC,KACtC,MAAMC,EAeV,YAAqBD,GACnB,MAAME,EAAOC,KAAKC,UAAUJ,GAE5B,IAAK,IAAIK,EAAI,EAAGC,EAAS,EAAGD,EAAIH,EAAKK,OAAQF,IAC3CC,EAAUE,KAAKC,KAAK,GAAIH,GAAUJ,EAAKQ,WAAWL,GAAM,EAE1D,OAAOC,EArBQK,CAASX,GAEtB,GAAIH,EAAGe,IAAIb,GAAK,CACd,MAAMc,EAAShB,EAAGiB,IAAIf,GACtB,OAAIc,EAAOD,IAAIX,GAAcY,EAAOC,IAAIb,GACjCY,EAAOE,IAAId,QAAYF,KAAMC,IAAOc,IAAIb,UAExCJ,EACJkB,IAAIhB,GAAI,IAAIiB,KAAMD,IAAId,QAAYF,KAAMC,KACxCc,IAAIf,GACJe,IAAIb"}